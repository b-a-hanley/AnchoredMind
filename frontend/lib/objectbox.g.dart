// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/gratitude.dart';
import 'models/heartrate.dart';
import 'models/journal.dart';
import 'models/profile.dart';
import 'models/state.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2471396633917328088),
      name: 'Gratitude',
      lastPropertyId: const obx_int.IdUid(4, 1552271777086520952),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6768859771629705759),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3353597515299899053),
            name: 'prompt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7208261403333453917),
            name: 'gratitude',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1552271777086520952),
            name: 'time',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4711068410205801635),
      name: 'Journal',
      lastPropertyId: const obx_int.IdUid(6, 1338053904837870947),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8911022526981100978),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7515719550566361150),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7441421998771758238),
            name: 'mood',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6741829604657874032),
            name: 'intensity',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2440164674604385192),
            name: 'time',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1338053904837870947),
            name: 'journal',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 773750519946823759),
      name: 'Heartrate',
      lastPropertyId: const obx_int.IdUid(3, 4410257775744340684),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7919842977219812998),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2763772398942048125),
            name: 'heartrate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4410257775744340684),
            name: 'time',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 5348299389296696978),
      name: 'Profile',
      lastPropertyId: const obx_int.IdUid(5, 9148562969846688580),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8893602705435457337),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4904773657105553469),
            name: 'language',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2761014153577303738),
            name: 'heartrateMonitor',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6937893441676763795),
            name: 'login',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9148562969846688580),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 1345817825797861499),
      name: 'State',
      lastPropertyId: const obx_int.IdUid(3, 3786986123741102404),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7478721775908582385),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3393115230523397955),
            name: 'page',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3786986123741102404),
            name: 'action',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 1345817825797861499),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [554087009581390749, 1760634824961285982],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7799292967835273230,
        8846385385924385410,
        4523205058209862644,
        2846331201677363276,
        9164771420800125964,
        1211230433869606260,
        3357199333426530394,
        2380887895461005645,
        2251074992104067846,
        8757761062959724505,
        5219210123510469387,
        5185122666846809564
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Gratitude: obx_int.EntityDefinition<Gratitude>(
        model: _entities[0],
        toOneRelations: (Gratitude object) => [],
        toManyRelations: (Gratitude object) => {},
        getId: (Gratitude object) => object.id,
        setId: (Gratitude object, int id) {
          object.id = id;
        },
        objectToFB: (Gratitude object, fb.Builder fbb) {
          final promptOffset = fbb.writeString(object.prompt);
          final gratitudeOffset = fbb.writeString(object.gratitude);
          final timeOffset = fbb.writeString(object.time);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, promptOffset);
          fbb.addOffset(2, gratitudeOffset);
          fbb.addOffset(3, timeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final promptParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final gratitudeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final timeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Gratitude(
              id: idParam,
              prompt: promptParam,
              gratitude: gratitudeParam,
              time: timeParam);

          return object;
        }),
    Journal: obx_int.EntityDefinition<Journal>(
        model: _entities[1],
        toOneRelations: (Journal object) => [],
        toManyRelations: (Journal object) => {},
        getId: (Journal object) => object.id,
        setId: (Journal object, int id) {
          object.id = id;
        },
        objectToFB: (Journal object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final moodOffset = fbb.writeString(object.mood);
          final intensityOffset = fbb.writeString(object.intensity);
          final timeOffset = fbb.writeString(object.time);
          final journalOffset = fbb.writeString(object.journal);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, moodOffset);
          fbb.addOffset(3, intensityOffset);
          fbb.addOffset(4, timeOffset);
          fbb.addOffset(5, journalOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final moodParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final intensityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final timeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final journalParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = Journal(
              id: idParam,
              title: titleParam,
              mood: moodParam,
              intensity: intensityParam,
              time: timeParam,
              journal: journalParam);

          return object;
        }),
    Heartrate: obx_int.EntityDefinition<Heartrate>(
        model: _entities[2],
        toOneRelations: (Heartrate object) => [],
        toManyRelations: (Heartrate object) => {},
        getId: (Heartrate object) => object.id,
        setId: (Heartrate object, int id) {
          object.id = id;
        },
        objectToFB: (Heartrate object, fb.Builder fbb) {
          final heartrateOffset = fbb.writeString(object.heartrate);
          final timeOffset = fbb.writeString(object.time);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, heartrateOffset);
          fbb.addOffset(2, timeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final heartrateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final timeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Heartrate(
              id: idParam, heartrate: heartrateParam, time: timeParam);

          return object;
        }),
    Profile: obx_int.EntityDefinition<Profile>(
        model: _entities[3],
        toOneRelations: (Profile object) => [],
        toManyRelations: (Profile object) => {},
        getId: (Profile object) => object.id,
        setId: (Profile object, int id) {
          object.id = id;
        },
        objectToFB: (Profile object, fb.Builder fbb) {
          final languageOffset = fbb.writeString(object.language);
          final heartrateMonitorOffset =
              fbb.writeString(object.heartrateMonitor);
          final loginOffset = fbb.writeString(object.login);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, languageOffset);
          fbb.addOffset(2, heartrateMonitorOffset);
          fbb.addOffset(3, loginOffset);
          fbb.addOffset(4, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final languageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final heartrateMonitorParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final loginParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Profile(
              id: idParam,
              language: languageParam,
              heartrateMonitor: heartrateMonitorParam,
              login: loginParam,
              password: passwordParam);

          return object;
        }),
    State: obx_int.EntityDefinition<State>(
        model: _entities[4],
        toOneRelations: (State object) => [],
        toManyRelations: (State object) => {},
        getId: (State object) => object.id,
        setId: (State object, int id) {
          object.id = id;
        },
        objectToFB: (State object, fb.Builder fbb) {
          final pageOffset = fbb.writeString(object.page);
          final actionOffset = fbb.writeString(object.action);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, pageOffset);
          fbb.addOffset(2, actionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final pageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final actionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object =
              State(id: idParam, page: pageParam, action: actionParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Gratitude] entity fields to define ObjectBox queries.
class Gratitude_ {
  /// see [Gratitude.id]
  static final id =
      obx.QueryIntegerProperty<Gratitude>(_entities[0].properties[0]);

  /// see [Gratitude.prompt]
  static final prompt =
      obx.QueryStringProperty<Gratitude>(_entities[0].properties[1]);

  /// see [Gratitude.gratitude]
  static final gratitude =
      obx.QueryStringProperty<Gratitude>(_entities[0].properties[2]);

  /// see [Gratitude.time]
  static final time =
      obx.QueryStringProperty<Gratitude>(_entities[0].properties[3]);
}

/// [Journal] entity fields to define ObjectBox queries.
class Journal_ {
  /// see [Journal.id]
  static final id =
      obx.QueryIntegerProperty<Journal>(_entities[1].properties[0]);

  /// see [Journal.title]
  static final title =
      obx.QueryStringProperty<Journal>(_entities[1].properties[1]);

  /// see [Journal.mood]
  static final mood =
      obx.QueryStringProperty<Journal>(_entities[1].properties[2]);

  /// see [Journal.intensity]
  static final intensity =
      obx.QueryStringProperty<Journal>(_entities[1].properties[3]);

  /// see [Journal.time]
  static final time =
      obx.QueryStringProperty<Journal>(_entities[1].properties[4]);

  /// see [Journal.journal]
  static final journal =
      obx.QueryStringProperty<Journal>(_entities[1].properties[5]);
}

/// [Heartrate] entity fields to define ObjectBox queries.
class Heartrate_ {
  /// see [Heartrate.id]
  static final id =
      obx.QueryIntegerProperty<Heartrate>(_entities[2].properties[0]);

  /// see [Heartrate.heartrate]
  static final heartrate =
      obx.QueryStringProperty<Heartrate>(_entities[2].properties[1]);

  /// see [Heartrate.time]
  static final time =
      obx.QueryStringProperty<Heartrate>(_entities[2].properties[2]);
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// see [Profile.id]
  static final id =
      obx.QueryIntegerProperty<Profile>(_entities[3].properties[0]);

  /// see [Profile.language]
  static final language =
      obx.QueryStringProperty<Profile>(_entities[3].properties[1]);

  /// see [Profile.heartrateMonitor]
  static final heartrateMonitor =
      obx.QueryStringProperty<Profile>(_entities[3].properties[2]);

  /// see [Profile.login]
  static final login =
      obx.QueryStringProperty<Profile>(_entities[3].properties[3]);

  /// see [Profile.password]
  static final password =
      obx.QueryStringProperty<Profile>(_entities[3].properties[4]);
}

/// [State] entity fields to define ObjectBox queries.
class State_ {
  /// see [State.id]
  static final id = obx.QueryIntegerProperty<State>(_entities[4].properties[0]);

  /// see [State.page]
  static final page =
      obx.QueryStringProperty<State>(_entities[4].properties[1]);

  /// see [State.action]
  static final action =
      obx.QueryStringProperty<State>(_entities[4].properties[2]);
}
